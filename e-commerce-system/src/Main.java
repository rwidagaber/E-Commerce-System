import entity.*;import service.CheckoutService;import java.time.LocalDate;public class Main {    public static void main(String[] args) {        CheckoutService checkoutService = new CheckoutService();        Customer customer = new Customer("customer", 1000.0);        Cart cart = new Cart();        //-----> Test Case 1: Successful checkout with ExpirableProduct <--------///        ExpirableProduct biscuits = ExpirableProduct.builder()                .name("Biscuits")                .price(10.0)                .quantity(5)                .expiryDate(LocalDate.of(2025, 7, 10))                .build();        cart.add(new Item(biscuits, 3));        checkoutService.checkout(customer, cart);        //-----> Test Case 2: Insufficient balance <--------////        ExpirableProduct biscuits = ExpirableProduct.builder()//                .name("Biscuits")//                .price(2000.0)//                .quantity(5)//                .expiryDate(LocalDate.of(2025, 8, 1))//                .build();////        cart.add(new Item(biscuits, 1));//        checkoutService.checkout(customer, cart);//      //-------> Test Case 3: Expired product <--------////        ExpirableProduct cheese2 = ExpirableProduct.builder()//                .name("cheese")//                .price(20.0)//                .quantity(3)//                .expiryDate(LocalDate.of(2025, 1, 1)) // expired//                .build();////        cart.add(new Item(cheese2, 1));//        checkoutService.checkout(customer, cart);        //-------> Test Case 4: Buy more than available quantity <--------//////        ExpirableProduct butter = ExpirableProduct.builder()//                .name("Butter")//                .price(30.0)//                .quantity(1)//                .expiryDate(LocalDate.of(2025, 12, 31))//                .build();////        cart.add(new Item(butter, 2)); // only 1 in stock//        checkoutService.checkout(customer, cart);       //---------> Test Case 5 Successful checkout with ShippableProduct <--------//////        ShippableProduct tv = ShippableProduct.builder()//                .name("TV ")//                .price(300)//                .quantity(5)//                .weight(500)//                .build();//        cart.add(new Item(tv, 2));//        checkoutService.checkout(customer, cart);   //----->    === Test Case 6: (Shippable + Expirable) <--------////        ShippableExpirableProduct cheese = ShippableExpirableProduct.builder()//                .name("Juice")//                .price(25.0)//                .quantity(10)//                .expiryDate(LocalDate.of(2026, 1, 1))//                .weight(100)//                .build();//        cart.add(new Item(cheese, 3));//        checkoutService.checkout(customer, cart);      //----->  Test Case 7: Edge Case - Zero quantity <--------////        ExpirableProduct honey = ExpirableProduct.builder()//                .name("Honey")//                .price(40.0)//                .quantity(0)//                .expiryDate(LocalDate.of(2025, 9, 1))//                .build();//////        cart.add(new Item(honey, 1));//        checkoutService.checkout(customer, cart);        // === Test Case 8 normal product ===//        Product MobileScratch = Product.builder()//                .name("Mobile Scratch")//                .price(100.0)//                .quantity(10)//                .build();////        cart.add(new Item(MobileScratch, 2));//        checkoutService.checkout(customer, cart);    }}